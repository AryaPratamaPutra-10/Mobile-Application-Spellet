import 'package:dotted_border/dotted_border.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_time_picker_spinner/flutter_time_picker_spinner.dart';
import 'package:load_switch/load_switch.dart';
import 'package:quickalert/quickalert.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class TimerScreen extends StatefulWidget {
  const TimerScreen({Key? key}) : super(key: key);

  @override
  State<TimerScreen> createState() => _TimerScreenState();
}

class _TimerScreenState extends State<TimerScreen> {
  final _auth = FirebaseAuth.instance;
  final CollectionReference userAlarmsCollection =
      FirebaseFirestore.instance.collection('alarms');

  List<DocumentSnapshot> userAlarms = [];

  // Define list for days selection
  List<bool> selectedDays =
      List.generate(7, (index) => false); // Default all days unselected

  // Function to convert selectedDays to a list of strings
  List<String> getSelectedDays() {
    List<String> days = [];
    if (selectedDays[0]) days.add('Sunday');
    if (selectedDays[1]) days.add('Monday');
    if (selectedDays[2]) days.add('Tuesday');
    if (selectedDays[3]) days.add('Wednesday');
    if (selectedDays[4]) days.add('Thursday');
    if (selectedDays[5]) days.add('Friday');
    if (selectedDays[6]) days.add('Saturday');
    return days;
  }

  @override
  void initState() {
    super.initState();
    fetchUserAlarms();
  }

  Future<void> fetchUserAlarms() async {
    final user = _auth.currentUser;
    if (user != null) {
      QuerySnapshot querySnapshot =
          await userAlarmsCollection.where('userId', isEqualTo: user.uid).get();
      setState(() {
        userAlarms = querySnapshot.docs;
      });
    }
  }

  void _showAddTimerModal(BuildContext context) {
    // Initialize selectedTime, nameController, repeat, alarmSound
    TimeOfDay selectedTime = TimeOfDay.now();
    TextEditingController nameController = TextEditingController();

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return Padding(
              padding: EdgeInsets.only(
                  bottom: MediaQuery.of(context).viewInsets.bottom),
              child: Container(
                padding: const EdgeInsets.all(16),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // TimePicker
                    TimePickerSpinner(
                      alignment: Alignment.center,
                      is24HourMode: true,
                      normalTextStyle:
                          const TextStyle(fontSize: 24, color: Colors.grey),
                      highlightedTextStyle:
                          const TextStyle(fontSize: 24, color: Colors.blue),
                      spacing: 50,
                      itemHeight: 60,
                      isForce2Digits: true,
                      onTimeChange: (time) {
                        setState(() {
                          selectedTime =
                              TimeOfDay(hour: time.hour, minute: time.minute);
                        });
                      },
                    ),

                    // Alarm Name TextField
                    TextField(
                      controller: nameController,
                      decoration: const InputDecoration(
                        labelText: 'Alarm Name',
                      ),
                    ),

                    const SizedBox(
                      height: 10,
                    ),

                    const Row(
                      children: [
                        Text('Repeat'),
                      ],
                    ),

                    // Day Picker
                    Row(
                      children: [
                        Wrap(
                          spacing: 6.5,
                          children: List.generate(7, (index) {
                            return ChoiceChip(
                              label: Text(
                                getDayName(index),
                                style: const TextStyle(
                                  color: Colors.blue,
                                  fontSize: 11,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              selected: selectedDays[index],
                              selectedColor: Colors.blue.shade100,
                              backgroundColor: Colors.blue.shade50,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(20),
                              ),
                              showCheckmark: false,
                              padding: const EdgeInsets.all(5),
                              onSelected: (selected) {
                                setState(() {
                                  selectedDays[index] = selected;
                                });
                              },
                            );
                          }),
                        ),
                      ],
                    ),
                    //

                    // Submit Button
                    ElevatedButton(
                      onPressed: () async {
                        try {
                          final user = _auth.currentUser;
                          if (user != null) {
                            await FirebaseFirestore.instance
                                .collection('alarms')
                                .add({
                              'time': selectedTime.format(context),
                              'name': nameController.text,
                              'userId': user.uid,
                              'alarmActive': false, // Set default value
                              'days': getSelectedDays(), // Add selected days
                            });
                            fetchUserAlarms();
                            Navigator.pop(context);
                          }
                        } catch (e) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text(e.toString())),
                          );
                        }
                      },
                      child: const Text('Save'),
                    ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }

  // Function to get day name based on index
  String getDayName(int index) {
    switch (index) {
      case 0:
        return 'Sun';
      case 1:
        return 'Mon';
      case 2:
        return 'Tue';
      case 3:
        return 'Wed';
      case 4:
        return 'Thu';
      case 5:
        return 'Fri';
      case 6:
        return 'Sat';
      default:
        return '';
    }
  }

  String getDayShortName(int index) {
    switch (index) {
      case 0:
        return 'Sun';
      case 1:
        return 'Mon';
      case 2:
        return 'Tue';
      case 3:
        return 'Wed';
      case 4:
        return 'Thu';
      case 5:
        return 'Fri';
      case 6:
        return 'Sat';
      default:
        return '';
    }
  }

  void _showLoginAlert(BuildContext context) {
    QuickAlert.show(
      context: context,
      type: QuickAlertType.warning,
      title: 'Login Required',
      text: 'Login untuk menambahkan alarm',
      confirmBtnText: 'OK',
      cancelBtnText: 'Cancel',
      disableBackBtn: false,
      onConfirmBtnTap: () {
        Navigator.of(context).pop();
      },
      onCancelBtnTap: () {},
    );
  }

  @override
  Widget build(BuildContext context) {
    final user = _auth.currentUser;
    final bool isLoggedIn = user != null;
    final bool hasAlarms = userAlarms.isNotEmpty;
    final bool canAddMoreAlarms = userAlarms.length < 5;

    return Scaffold(
      extendBody: true,
      backgroundColor: Colors.white,
      appBar: AppBar(
        toolbarHeight: 70,
        title: Image.asset(
          'assets/Logo2.png',
          fit: BoxFit.contain,
          height: 75,
          color: Colors.white,
        ),
        centerTitle: true,
        actions: <Widget>[
          IconButton(
            onPressed: () {},
            icon: const Icon(
              Icons.notifications,
              color: Colors.white,
            ),
          ),
        ],
        backgroundColor: Colors.blue,
      ),
      body: Column(
        children: [
          // Real Time Clock
          Container(
            height: 150,
            margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            alignment: Alignment.center,
            color: Colors.blue,
          ),
          //
          
          // Check if user is logged in
          if (!isLoggedIn) ...[
            // Add Alarm
            Container(
              height: 100,
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              child: DottedBorder(
                borderType: BorderType.RRect,
                radius: const Radius.circular(10),
                dashPattern: const [10, 10],
                color: Colors.red.shade200,
                strokeWidth: 2,
                child: InkWell(
                  onTap: () {
                    final user = _auth.currentUser;
                    if (user == null) {
                      _showLoginAlert(context);
                    } else {
                      _showAddTimerModal(context);
                    }
                  },
                  borderRadius: BorderRadius.circular(10),
                  child: Container(
                    height: 80,
                    margin:
                        const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                      color: Colors.red.shade200,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: const Column(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Text(
                          'You\'re not signed in',
                          style: TextStyle(
                            color: Colors.white,
                          ),
                        ),
                        Text(
                          'Tap to Sign In',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 11,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ] else if (isLoggedIn && !hasAlarms) ...[
            // Add Alarm
            Container(
              height: 100,
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
              child: DottedBorder(
                borderType: BorderType.RRect,
                radius: const Radius.circular(10),
                dashPattern: const [10, 10],
                color: Colors.blue.shade300,
                strokeWidth: 2,
                child: InkWell(
                  onTap: () {
                    final user = _auth.currentUser;
                    if (user == null) {
                      _showLoginAlert(context);
                    } else {
                      _showAddTimerModal(context);
                    }
                  },
                  borderRadius: BorderRadius.circular(10),
                  child: Container(
                    height: 80,
                    margin:
                        const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                      color: Colors.blue.shade300,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: const Column(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Text(
                          'No Timer Yet',
                          style: TextStyle(
                            color: Colors.white,
                          ),
                        ),
                        Text(
                          'Tap to add Timer',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 11,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ] else if (isLoggedIn && hasAlarms) ...[
            // User Alarms ListView
            Expanded(
              child: ListView.builder(
                itemCount: userAlarms.length,
                itemBuilder: (context, index) {
                  DocumentSnapshot alarm = userAlarms[index];
                  DocumentReference alarmRef =
                      userAlarmsCollection.doc(alarm.id);
                  bool isActived = alarm['alarmActive'] ?? false;
                  List<dynamic> days = alarm['days'];

                  return Container(
                    height: 180,
                    margin:
                        const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: Colors.blue,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    padding: const EdgeInsets.symmetric(vertical: 20),
                    alignment: Alignment.center,
                    child: Column(
                      children: [
                        // Name Container
                        Container(
                          height: 35,
                          margin: const EdgeInsets.symmetric(horizontal: 10),
                          padding: const EdgeInsets.only(top: 2),
                          decoration: BoxDecoration(
                            color: Colors.transparent,
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: Column(
                            children: [
                              Row(
                                children: [
                                  Text(
                                    alarm['name'],
                                    style: const TextStyle(
                                      fontSize: 12,
                                      fontWeight: FontWeight.w600,
                                      color: Colors.white,
                                    ),
                                  ),
                                ],
                              ),
                              const Divider(
                                color: Colors.white,
                              ),
                            ],
                          ),
                        ),
                        //
                        Container(
                          height: 50,
                          margin: const EdgeInsets.symmetric(horizontal: 10),
                          decoration: BoxDecoration(
                            color: Colors.transparent,
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              // Time Container
                              Container(
                                height: 40,
                                alignment: Alignment.center,
                                margin: const EdgeInsets.symmetric(
                                    horizontal: 8, vertical: 8),
                                decoration: BoxDecoration(
                                  color: Colors.transparent,
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                child: Text(
                                  alarm['time'],
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 30,
                                    fontWeight: FontWeight.w700,
                                  ),
                                ),
                              ),
                              //

                              // Switch Button
                              Container(
                                height: 25,
                                margin: const EdgeInsets.symmetric(
                                    horizontal: 8, vertical: 8),
                                alignment: Alignment.center,
                                decoration: BoxDecoration(
                                  color: Colors.transparent,
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                child: LoadSwitch(
                                  height: 25,
                                  width: 50,
                                  value: isActived,
                                  switchDecoration: (value, isActived) =>
                                      BoxDecoration(
                                    color: isActived
                                        ? Colors.blue.shade300
                                        : Colors.blue.shade100,
                                    borderRadius: BorderRadius.circular(30),
                                  ),
                                  future: () async {
                                    await Future.delayed(
                                        const Duration(seconds: 1));
                                    return !isActived;
                                  },
                                  onChange: (v) {
                                    setState(() {
                                      isActived = v;
                                    });
                                    alarmRef.update({'alarmActive': v});
                                  },
                                  onTap: (v) {
                                    print('Tapping while value is $v');
                                  },
                                ),
                              ),
                              //
                            ],
                          ),
                        ),
                        //

                        // Days Container
                        Container(
                          height: 25,
                          alignment: Alignment.centerLeft,
                          margin: const EdgeInsets.symmetric(horizontal: 10),
                          decoration: BoxDecoration(
                            color: Colors.transparent,
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: const Text(
                            'Days',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                        //
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            // Days List Container
                            Container(
                              height: 25,
                              alignment: Alignment.center,
                              margin:
                                  const EdgeInsets.symmetric(horizontal: 10),
                              decoration: BoxDecoration(
                                color: Colors.transparent,
                                borderRadius: BorderRadius.circular(10),
                              ),
                              child: Row(
                                children: List.generate(7, (dayIndex) {
                                  return Container(
                                    height: 25,
                                    width: 30,
                                    alignment: Alignment.center,
                                    margin: const EdgeInsets.symmetric(
                                        horizontal: 2, vertical: 2),
                                    decoration: BoxDecoration(
                                      color: days.contains(getDayName(dayIndex))
                                          ? Colors
                                              .white // Adjust based on your design
                                          : Colors
                                              .blue, // Adjust based on your design
                                      borderRadius: BorderRadius.circular(10),
                                    ),
                                    child: Center(
                                      child: Text(
                                        getDayShortName(
                                            dayIndex), // Implement getDayShortName function
                                        style: const TextStyle(
                                          color: Colors.white,
                                          fontSize:
                                              11, // Adjust based on your design
                                        ),
                                      ),
                                    ),
                                  );
                                }),
                              ),
                            ),
                            //

                            // Action Button
                            Container(
                              height: 25,
                              alignment: Alignment.center,
                              margin:
                                  const EdgeInsets.symmetric(horizontal: 10),
                              decoration: BoxDecoration(
                                color: Colors.transparent,
                                borderRadius: BorderRadius.circular(10),
                              ),
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  IconButton(
                                    padding: EdgeInsets.all(5),
                                    onPressed: () {},
                                    icon: Icon(Icons.edit),
                                    color: Colors.white,
                                    iconSize: 15,
                                  ),
                                  IconButton(
                                    padding: EdgeInsets.all(5),
                                    onPressed: () {},
                                    icon: Icon(Icons.delete),
                                    color: Colors.white,
                                    iconSize: 15,
                                  ),
                                ],
                              ),
                            ),
                            //
                          ],
                        ),
                        //
                      ],
                    ),
                  );
                },
              ),
            ),

            // Add Alarm
            if (canAddMoreAlarms) _buildAddTimerButton(context),
          ],
        ],
      ),
    );
  }

  Widget _buildAddTimerButton(BuildContext context) {
    final user = _auth.currentUser;

    return Container(
      height: 100,
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
      child: DottedBorder(
        borderType: BorderType.RRect,
        radius: const Radius.circular(10),
        dashPattern: const [10, 10],
        color: Colors.blue.shade300,
        strokeWidth: 2,
        child: InkWell(
          onTap: () {
            if (user == null) {
              _showLoginAlert(context);
            } else {
              _showAddTimerModal(context);
            }
          },
          borderRadius: BorderRadius.circular(10),
          child: Container(
            height: 80,
            margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
            alignment: Alignment.center,
            decoration: BoxDecoration(
              color: Colors.blue.shade300,
              borderRadius: BorderRadius.circular(10),
            ),
            child: const Text(
              'Add Timer',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ),
      ),
    );
  }
}
